diff --git a/node_modules/react-native/scripts/codegen/generate-artifacts-executor.js b/node_modules/react-native/scripts/codegen/generate-artifacts-executor.js
index 458495b..6fc398a 100644
--- a/node_modules/react-native/scripts/codegen/generate-artifacts-executor.js
+++ b/node_modules/react-native/scripts/codegen/generate-artifacts-executor.js
@@ -204,6 +204,55 @@ function handleThirdPartyLibraries(
   });
 }
 
+function handleLibrariesFromReactNativeConfig(
+  libraries,
+  codegenConfigKey,
+  codegenConfigFilename,
+  appRootDir,
+) {
+  const rnConfigFileName = 'react-native.config.js';
+
+  console.log(
+    `\n\n[Codegen] >>>>> Searching for codegen-enabled libraries in ${rnConfigFileName}`,
+  );
+
+  const rnConfigFilePath = path.join(appRootDir, rnConfigFileName);
+
+  if (fs.existsSync(rnConfigFilePath)) {
+    const rnConfig = require(rnConfigFilePath);
+
+    if (rnConfig.dependencies != null) {
+      Object.keys(rnConfig.dependencies).forEach(name => {
+        const dependencyConfig = rnConfig.dependencies[name];
+
+        if (dependencyConfig.root) {
+          const codegenConfigFileDir = path.resolve(
+            appRootDir,
+            dependencyConfig.root,
+          );
+          const configFilePath = path.join(
+            codegenConfigFileDir,
+            codegenConfigFilename,
+          );
+          const pkgJsonPath = path.join(codegenConfigFileDir, 'package.json');
+
+          if (fs.existsSync(configFilePath)) {
+            const pkgJson = JSON.parse(fs.readFileSync(pkgJsonPath));
+            const configFile = JSON.parse(fs.readFileSync(configFilePath));
+            extractLibrariesFromJSON(
+              configFile,
+              libraries,
+              codegenConfigKey,
+              pkgJson.name,
+              codegenConfigFileDir,
+            );
+          }
+        }
+      });
+    }
+  }
+}
+
 function handleInAppLibraries(
   libraries,
   pkgJson,
@@ -362,6 +411,39 @@ function createComponentProvider(
   }
 }
 
+function findCodegenEnabledLibraries(
+  appRootDir,
+  baseCodegenConfigFileDir,
+  codegenConfigFilename,
+  codegenConfigKey,
+) {
+  const pkgJson = readPackageJSON(appRootDir);
+  const dependencies = {...pkgJson.dependencies, ...pkgJson.devDependencies};
+  const libraries = [];
+
+  handleReactNativeCodeLibraries(
+    libraries,
+    codegenConfigFilename,
+    codegenConfigKey,
+  );
+  handleThirdPartyLibraries(
+    libraries,
+    baseCodegenConfigFileDir,
+    dependencies,
+    codegenConfigFilename,
+    codegenConfigKey,
+  );
+  handleLibrariesFromReactNativeConfig(
+    libraries,
+    codegenConfigKey,
+    codegenConfigFilename,
+    appRootDir,
+  );
+  handleInAppLibraries(libraries, pkgJson, codegenConfigKey, appRootDir);
+
+  return libraries;
+}
+
 // It removes all the empty files and empty folders
 // it finds, starting from `filepath`, recursively.
 //
@@ -429,23 +511,12 @@ function execute(
   }
 
   try {
-    const pkgJson = readPackageJSON(appRootDir);
-    const dependencies = {...pkgJson.dependencies, ...pkgJson.devDependencies};
-    const libraries = [];
-
-    handleReactNativeCodeLibraries(
-      libraries,
-      codegenConfigFilename,
-      codegenConfigKey,
-    );
-    handleThirdPartyLibraries(
-      libraries,
+    const libraries = findCodegenEnabledLibraries(
+      appRootDir,
       baseCodegenConfigFileDir,
-      dependencies,
       codegenConfigFilename,
       codegenConfigKey,
     );
-    handleInAppLibraries(libraries, pkgJson, codegenConfigKey, appRootDir);
 
     if (libraries.length === 0) {
       console.log('[Codegen] No codegen-enabled libraries found.');
@@ -482,6 +553,7 @@ module.exports = {
   execute: execute,
   // exported for testing purposes only:
   _extractLibrariesFromJSON: extractLibrariesFromJSON,
+  _findCodegenEnabledLibraries: findCodegenEnabledLibraries,
   _executeNodeScript: executeNodeScript,
   _generateCode: generateCode,
   _cleanupEmptyFilesAndFolders: cleanupEmptyFilesAndFolders,
diff --git a/node_modules/react-native/sdks/hermes/hermes-engine.podspec b/node_modules/react-native/sdks/hermes/hermes-engine.podspec
new file mode 100644
index 0000000..8d331e0
--- /dev/null
+++ b/node_modules/react-native/sdks/hermes/hermes-engine.podspec
@@ -0,0 +1,84 @@
+# Copyright (c) Meta Platforms, Inc. and affiliates.
+#
+# This source code is licensed under the MIT license found in the
+# LICENSE file in the root directory of this source tree.
+
+require "json"
+require "open3"
+
+# sdks/hermesc/osx-bin/ImportHermesc.cmake
+import_hermesc_file=File.join(__dir__, "..", "hermesc", "osx-bin", "ImportHermesc.cmake")
+
+# package.json
+package_file = File.join(__dir__, "..", "..", "package.json")
+package = JSON.parse(File.read(package_file))
+version = package['version']
+
+# We need to check the current git branch/remote to verify if
+# we're on a React Native release branch to actually build Hermes.
+currentbranch, err = Open3.capture3("git rev-parse --abbrev-ref HEAD")
+currentremote, err = Open3.capture3("git config --get remote.origin.url")
+
+source = {}
+git = "https://github.com/facebook/hermes.git"
+
+if ENV.has_key?('HERMES_ENGINE_TARBALL_PATH')
+  Pod::UI.puts '[Hermes] Using pre-built Hermes binaries from local path.' if Object.const_defined?("Pod::UI")
+  source[:http] = "file://#{ENV['HERMES_ENGINE_TARBALL_PATH']}"
+elsif version == '1000.0.0'
+  Pod::UI.puts '[Hermes] Hermes needs to be compiled, installing hermes-engine may take a while...'.yellow if Object.const_defined?("Pod::UI")
+  source[:git] = git
+  source[:commit] = `git ls-remote https://github.com/facebook/hermes main | cut -f 1`.strip
+elsif currentremote.strip.end_with?("facebook/react-native.git") and currentbranch.strip.end_with?("-stable")
+  Pod::UI.puts '[Hermes] Detected that you are on a React Native release branch, building Hermes from source...'.yellow if Object.const_defined?("Pod::UI")
+  hermestag_file = File.join(__dir__, "..", ".hermesversion")
+  hermestag = File.read(hermestag_file).strip
+  source[:git] = git
+  source[:tag] = hermestag
+else
+  source[:http] = "https://github.com/facebook/react-native/releases/download/v#{version}/hermes-runtime-darwin-v#{version}.tar.gz"
+end
+
+module HermesHelper
+  # BUILD_TYPE = :debug
+  BUILD_TYPE = :release
+end
+
+Pod::Spec.new do |spec|
+  spec.name        = "hermes-engine"
+  spec.version     = version
+  spec.summary     = "Hermes is a small and lightweight JavaScript engine optimized for running React Native."
+  spec.description = "Hermes is a JavaScript engine optimized for fast start-up of React Native apps. It features ahead-of-time static optimization and compact bytecode."
+  spec.homepage    = "https://hermesengine.dev"
+  spec.license     = package["license"]
+  spec.author      = "Facebook"
+  spec.source      = source
+  spec.platforms   = { :osx => "10.13", :ios => "12.4" }
+
+  spec.preserve_paths      = ["destroot/bin/*"].concat(HermesHelper::BUILD_TYPE == :debug ? ["**/*.{h,c,cpp}"] : [])
+  spec.source_files        = "destroot/include/**/*.h"
+  spec.header_mappings_dir = "destroot/include"
+
+  spec.ios.vendored_frameworks = "destroot/Library/Frameworks/universal/hermes.xcframework"
+  spec.osx.vendored_frameworks = "destroot/Library/Frameworks/macosx/hermes.framework"
+
+  spec.xcconfig            = { "CLANG_CXX_LANGUAGE_STANDARD" => "c++17", "CLANG_CXX_LIBRARY" => "compiler-default", "GCC_PREPROCESSOR_DEFINITIONS" => "HERMES_ENABLE_DEBUGGER=1" }
+
+  if source[:git] then
+    spec.prepare_command = <<-EOS
+      # When true, debug build will be used.
+      # See `build-apple-framework.sh` for details
+      DEBUG=#{HermesHelper::BUILD_TYPE == :debug}
+
+      # Set HERMES_OVERRIDE_HERMESC_PATH if pre-built HermesC is available
+      #{File.exist?(import_hermesc_file) ? "export HERMES_OVERRIDE_HERMESC_PATH=#{import_hermesc_file}" : ""}
+      #{File.exist?(import_hermesc_file) ? "echo \"Overriding HermesC path...\"" : ""}
+
+      # Build iOS framework
+      ./utils/build-ios-framework.sh
+
+      # Build Mac framework
+      ./utils/build-mac-framework.sh
+    EOS
+  end
+end

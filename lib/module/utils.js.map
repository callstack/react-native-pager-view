{"version":3,"sources":["utils.tsx"],"names":["React","Children","processColor","childrenWithOverriddenStyle","children","map","child","props","newProps","style","position","left","top","right","bottom","width","undefined","height","collapsable","cloneElement","transformPagerProps","options","activeDotColor","inactiveDotColor","toString"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,QAAyD,OAAzD;AACA,SAASC,YAAT,QAA6B,cAA7B;AAGA,OAAO,MAAMC,2BAA2B,GAAIC,QAAD,IAA0B;AACnE;AACA;AACA;AACA,SAAOH,QAAQ,CAACI,GAAT,CAAaD,QAAb,EAAwBE,KAAD,IAAW;AACvC,UAAM;AAAEC,MAAAA;AAAF,QAAYD,KAAlB;AACA,UAAME,QAAQ,GAAG,EACf,GAAGD,KADY;AAEfE,MAAAA,KAAK,EAAE,CACLF,KAAK,CAACE,KADD,EAEL;AACEC,QAAAA,QAAQ,EAAE,UADZ;AAEEC,QAAAA,IAAI,EAAE,CAFR;AAGEC,QAAAA,GAAG,EAAE,CAHP;AAIEC,QAAAA,KAAK,EAAE,CAJT;AAKEC,QAAAA,MAAM,EAAE,CALV;AAMEC,QAAAA,KAAK,EAAEC,SANT;AAOEC,QAAAA,MAAM,EAAED;AAPV,OAFK,CAFQ;AAcfE,MAAAA,WAAW,EAAE;AAdE,KAAjB;AAgBA,wBAAOlB,KAAK,CAACmB,YAAN,CAAmBb,KAAnB,EAA0CE,QAA1C,CAAP;AACD,GAnBM,CAAP;AAoBD,CAxBM;AA0BP,OAAO,MAAMY,mBAAmB,GAAIC,OAAD,IAAkC;AACnE,MAAI,CAACA,OAAL,EAAc;AACZ,WAAOL,SAAP;AACD;;AACD,QAAM;AAAEM,IAAAA,cAAc,GAAG,MAAnB;AAA2BC,IAAAA,gBAAgB,GAAG;AAA9C,MAAyDF,OAA/D;AACA,SAAO;AACLC,IAAAA,cAAc,EAAG,IAAGpB,YAAY,CAACoB,cAAD,CAAZ,CAA6BE,QAA7B,CAAsC,EAAtC,CAA0C,EADzD;AAELD,IAAAA,gBAAgB,EAAG,IAAGrB,YAAY,CAACqB,gBAAD,CAAZ,CAA+BC,QAA/B,CAAwC,EAAxC,CAA4C;AAF7D,GAAP;AAID,CATM","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport React, { Children, ReactNode, ReactElement } from 'react';\nimport { processColor } from 'react-native';\nimport type { PageIndicatorProps } from './types';\n\nexport const childrenWithOverriddenStyle = (children?: ReactNode) => {\n  // Override styles so that each page will fill the parent. Native component\n  // will handle positioning of elements, so it's not important to offset\n  // them correctly.\n  return Children.map(children, (child) => {\n    const { props } = child as ReactElement;\n    const newProps = {\n      ...props,\n      style: [\n        props.style,\n        {\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          right: 0,\n          bottom: 0,\n          width: undefined,\n          height: undefined,\n        },\n      ],\n      collapsable: false,\n    };\n    return React.cloneElement(child as ReactElement, newProps);\n  });\n};\n\nexport const transformPagerProps = (options?: PageIndicatorProps) => {\n  if (!options) {\n    return undefined;\n  }\n  const { activeDotColor = '#000', inactiveDotColor = '#fff' } = options;\n  return {\n    activeDotColor: `#${processColor(activeDotColor).toString(16)}`,\n    inactiveDotColor: `#${processColor(inactiveDotColor).toString(16)}`,\n  };\n};\n"]}
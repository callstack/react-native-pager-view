{"version":3,"sources":["LazyPagerView.tsx"],"names":["LazyPagerView","React","PureComponent","createRef","setPage","page","pagerImplRef","current","setPageWithoutAnimation","setScrollEnabled","scrollEnabled","render","style","implProps","props","LazyPagerViewImpl","Component","constructor","isScrolling","event","onPageScroll","keyboardDismissMode","Keyboard","dismiss","onPageScrollStateChanged","nativeEvent","pageScrollState","currentPage","position","isNavigatingToPage","requestAnimationFrame","setState","prevState","computeRenderWindow","buffer","maxRenderWindow","offset","windowLength","onPageSelected","initialPage","Math","max","state","componentWillUnmount","animationFrameRequestId","undefined","cancelAnimationFrame","componentDidMount","UIManager","dispatchViewManagerCommand","Commands","shouldComponentUpdate","nextProps","nextState","stateKeys","stateKey","propKeys","propKey","animated","data","length","setImmediate","maxRenderWindowLowerBound","min","console","warn","floor","renderChildren","keys","children","slice","map","item","index","key","keyExtractor","push","styles","pageContainer","renderItem","offscreenPageLimit","onMoveShouldSetResponderCapture","orientation","overdrag","overScrollMode","pageMargin","showPageIndicator","nativeView","transitionStyle","StyleSheet","create","flex","height","width"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  findNodeHandle,\n  Keyboard,\n  StyleSheet,\n  UIManager,\n  View,\n} from 'react-native';\n\nimport { getViewManagerConfig, PagerViewViewManager } from './PagerViewNative';\nimport type {\n  LazyPagerViewProps,\n  Pageable,\n  PagerViewOnPageScrollEvent,\n  PagerViewOnPageSelectedEvent,\n  PageScrollStateChangedNativeEvent,\n} from './types';\n\ntype LazyPagerViewImplProps<ItemT> = Omit<LazyPagerViewProps<ItemT>, 'style'>;\ntype LazyPagerViewImplState = { offset: number; windowLength: number };\n\ntype RenderWindowData = {\n  buffer: number | undefined;\n  currentPage: number;\n  maxRenderWindow: number | undefined;\n  offset: number;\n  windowLength: number;\n};\n\n/**\n * PagerView implementation that renders pages when needed (lazy loading)\n */\nexport class LazyPagerView<ItemT>\n  extends React.PureComponent<LazyPagerViewProps<ItemT>>\n  implements Pageable {\n  private pagerImplRef = React.createRef<LazyPagerViewImpl<ItemT>>();\n\n  setPage(page: number): void {\n    this.pagerImplRef.current?.setPage(page, true);\n  }\n\n  setPageWithoutAnimation(page: number): void {\n    this.pagerImplRef.current?.setPage(page, false);\n  }\n\n  setScrollEnabled(scrollEnabled: boolean): void {\n    this.pagerImplRef.current?.setScrollEnabled(scrollEnabled);\n  }\n\n  render() {\n    const { style, ...implProps } = this.props;\n\n    return (\n      <View style={style}>\n        <LazyPagerViewImpl {...implProps} ref={this.pagerImplRef} />\n      </View>\n    );\n  }\n}\n\nclass LazyPagerViewImpl<ItemT> extends React.Component<\n  LazyPagerViewImplProps<ItemT>,\n  LazyPagerViewImplState\n> {\n  private isNavigatingToPage: number | null = null;\n  private isScrolling = false;\n  private animationFrameRequestId?: number;\n\n  constructor(props: LazyPagerViewImplProps<ItemT>) {\n    super(props);\n    const initialPage = Math.max(this.props.initialPage ?? 0, 0);\n    this.state = this.computeRenderWindow({\n      buffer: props.buffer,\n      currentPage: initialPage,\n      maxRenderWindow: props.maxRenderWindow,\n      offset: initialPage,\n      windowLength: 0,\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.animationFrameRequestId !== undefined) {\n      cancelAnimationFrame(this.animationFrameRequestId);\n    }\n  }\n\n  componentDidMount() {\n    const initialPage = this.props.initialPage;\n    if (initialPage != null && initialPage > 0) {\n      this.isNavigatingToPage = initialPage;\n      this.animationFrameRequestId = requestAnimationFrame(() => {\n        // Send command directly; render window already contains destination.\n        UIManager.dispatchViewManagerCommand(\n          findNodeHandle(this),\n          getViewManagerConfig().Commands.setPageWithoutAnimation,\n          [initialPage]\n        );\n      });\n    }\n  }\n\n  shouldComponentUpdate(\n    nextProps: LazyPagerViewImplProps<ItemT>,\n    nextState: LazyPagerViewImplState\n  ) {\n    const stateKeys: (keyof LazyPagerViewImplState)[] = [\n      'offset',\n      'windowLength',\n    ];\n    for (const stateKey of stateKeys) {\n      if (this.state[stateKey] !== nextState[stateKey]) {\n        return true;\n      }\n    }\n\n    const propKeys: (keyof LazyPagerViewImplProps<ItemT>)[] = [\n      'data',\n      'keyExtractor',\n      'offscreenPageLimit',\n      'orientation',\n      'overdrag',\n      'overScrollMode',\n      'pageMargin',\n      'renderItem',\n      'scrollEnabled',\n      'showPageIndicator',\n      'transitionStyle',\n    ];\n    for (const propKey of propKeys) {\n      if (this.props[propKey] !== nextProps[propKey]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * A helper function to scroll to a specific page in the PagerView.\n   */\n  setPage(page: number, animated: boolean) {\n    if (page < 0 || page >= this.props.data.length) {\n      return;\n    }\n\n    // Start rendering the destination.\n    this.setState((prevState) =>\n      this.computeRenderWindow({\n        buffer: this.props.buffer,\n        currentPage: page,\n        maxRenderWindow: this.props.maxRenderWindow,\n        offset: prevState.offset,\n        windowLength: prevState.windowLength,\n      })\n    );\n    // Send paging command.\n    setImmediate(() => {\n      UIManager.dispatchViewManagerCommand(\n        findNodeHandle(this),\n        animated\n          ? getViewManagerConfig().Commands.setPage\n          : getViewManagerConfig().Commands.setPageWithoutAnimation,\n        [page]\n      );\n    });\n  }\n\n  /**\n   * A helper function to enable/disable scroll imperatively.\n   * The recommended way is using the scrollEnabled prop, however, there might\n   * be a case where an imperative solution is more useful (e.g. for not\n   * blocking an animation)\n   */\n  setScrollEnabled(scrollEnabled: boolean) {\n    UIManager.dispatchViewManagerCommand(\n      findNodeHandle(this),\n      getViewManagerConfig().Commands.setScrollEnabled,\n      [scrollEnabled]\n    );\n  }\n\n  /**\n   * Compute desired render window size.\n   *\n   * Returns `offset` and `windowLength` unmodified, unless in conflict with\n   * restrictions from `buffer` or `maxRenderWindow`.\n   */\n  private computeRenderWindow(data: RenderWindowData): LazyPagerViewImplState {\n    const buffer = Math.max(data.buffer ?? 1, 1);\n    const maxRenderWindowLowerBound = 1 + 2 * buffer;\n    let offset = Math.max(Math.min(data.offset, data.currentPage - buffer), 0);\n    let windowLength =\n      Math.max(data.offset + data.windowLength, data.currentPage + buffer + 1) -\n      offset;\n\n    let maxRenderWindow = data.maxRenderWindow ?? 0;\n    if (maxRenderWindow !== 0) {\n      if (maxRenderWindow < maxRenderWindowLowerBound) {\n        console.warn(\n          `maxRenderWindow too small. Increasing to ${maxRenderWindowLowerBound}`\n        );\n        maxRenderWindow = maxRenderWindowLowerBound;\n      }\n      if (windowLength > maxRenderWindow) {\n        offset = data.currentPage - Math.floor(maxRenderWindow / 2);\n        windowLength = maxRenderWindow;\n      }\n    }\n\n    return { offset, windowLength };\n  }\n\n  private onMoveShouldSetResponderCapture = () => this.isScrolling;\n\n  private onPageScroll = (event: PagerViewOnPageScrollEvent) => {\n    this.props.onPageScroll?.(event);\n    if (this.props.keyboardDismissMode === 'on-drag') {\n      Keyboard.dismiss();\n    }\n  };\n\n  private onPageScrollStateChanged = (\n    event: PageScrollStateChangedNativeEvent\n  ) => {\n    this.props.onPageScrollStateChanged?.(event);\n    this.isScrolling = event.nativeEvent.pageScrollState === 'dragging';\n  };\n\n  private onPageSelected = (event: PagerViewOnPageSelectedEvent) => {\n    const currentPage = event.nativeEvent.position;\n\n    // Ignore spurious events that can occur on mount with `initialPage`.\n    // TODO: Is there a way to avoid triggering the events at all?\n    if (this.isNavigatingToPage != null) {\n      if (this.isNavigatingToPage === currentPage) {\n        this.isNavigatingToPage = null;\n      } else {\n        // Ignore event.\n        return;\n      }\n    }\n\n    // Queue renders for next needed pages (if not already available).\n    requestAnimationFrame(() => {\n      this.setState((prevState) =>\n        this.computeRenderWindow({\n          buffer: this.props.buffer,\n          currentPage,\n          maxRenderWindow: this.props.maxRenderWindow,\n          offset: prevState.offset,\n          windowLength: prevState.windowLength,\n        })\n      );\n    });\n\n    this.props.onPageSelected?.(event);\n  };\n\n  private renderChildren(offset: number, windowLength: number) {\n    const keys: string[] = [];\n    return {\n      children: this.props.data\n        .slice(offset, offset + windowLength)\n        .map((item, index) => {\n          const key = this.props.keyExtractor(item, offset + index);\n          keys.push(key);\n          return (\n            <View collapsable={false} key={key} style={styles.pageContainer}>\n              {this.props.renderItem({ item, index: offset + index })}\n            </View>\n          );\n        }),\n      keys,\n    };\n  }\n\n  render() {\n    const { offset, windowLength } = this.state;\n    const { children } = this.renderChildren(offset, windowLength);\n\n    return (\n      <PagerViewViewManager\n        count={this.props.data.length}\n        offscreenPageLimit={this.props.offscreenPageLimit}\n        offset={offset}\n        onMoveShouldSetResponderCapture={this.onMoveShouldSetResponderCapture}\n        onPageScroll={this.onPageScroll}\n        onPageScrollStateChanged={this.onPageScrollStateChanged}\n        onPageSelected={this.onPageSelected}\n        orientation={this.props.orientation}\n        overdrag={this.props.overdrag}\n        overScrollMode={this.props.overScrollMode}\n        pageMargin={this.props.pageMargin}\n        scrollEnabled={this.props.scrollEnabled}\n        showPageIndicator={this.props.showPageIndicator}\n        style={styles.nativeView}\n        transitionStyle={this.props.transitionStyle}\n      >\n        {children}\n      </PagerViewViewManager>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  nativeView: { flex: 1 },\n  pageContainer: { height: '100%', position: 'absolute', width: '100%' },\n});\n"]}